#!/usr/bin/ruby
#
# RSQL Copyright Â© 2007-2008 unwwwired.net
# Created by: S. Brent Faulkner (brentf@unwwwired.net) 2007-08-29
#

require 'getoptlong'
require 'readline' 
include Readline 
require 'shellwords' 
include Shellwords
require 'singleton'

require 'odbc'

require 'rsql/odbc'
require 'rsql/rsql'


module RSQL
  COMMAND = File.basename($0)

  opts = GetoptLong.new(
    [ "--execute", "-e", GetoptLong::REQUIRED_ARGUMENT ],
    [ "--mode", "-m", GetoptLong::REQUIRED_ARGUMENT ],
    [ "--password", "-p", GetoptLong::REQUIRED_ARGUMENT ],
    [ "--quiet", "-q", GetoptLong::NO_ARGUMENT ],
    [ "--user", "-u", GetoptLong::REQUIRED_ARGUMENT ],
    [ "--verbose", "-v", GetoptLong::NO_ARGUMENT ]
  )

  opts.each do |opt, arg|
    OPTIONS[opt[/--(.*)/,1].to_sym] = arg
  end

  # to hide the noise from the ODBC driver
  STDERR.reopen("/dev/null") unless OPTIONS[:verbose]

  if ARGV.length > 1
    puts "#{COMMAND}: too many arguments"
    exit
  end

  if OPTIONS[:execute]
    # a command requires a database
    if ARGV.length < 1
      puts "#{COMMAND}: no database specified"
      exit
    end
    # force quiet-mode if command provided
    OPTIONS[:quiet] = true
  end

  # set format for output
  begin
    ODBC::Statement.mode = OPTIONS[:mode]
  rescue => e
    puts "#{COMMAND}: #{e}"
    exit
  end

  # quiet-mode wins over verbose-mode
  OPTIONS.delete :verbose if OPTIONS[:quiet]

  puts "#{COMMAND} v0.9.3 - Copyright (c) 2007-2008 unwwwired.net" unless OPTIONS[:quiet]

  begin
    # use dsn if provided
    begin
      RSQL.instance.use(ARGV[0]) if ARGV.length > 0
    rescue ODBC::Error => error
      puts "ERROR: #{error}"
    end

    if OPTIONS[:execute]
      RSQL.execute OPTIONS[:execute]
    else
      # get (and process) each command line in turn
      while command = readline("#{COMMAND}> ", true)
        RSQL.execute command
      end
    end
  rescue SystemExit
    puts "Bye" unless OPTIONS[:quiet]
  rescue => exception
    puts %Q(INTERNAL ERROR: #{exception}\n#{exception.backtrace.join("\n")})
  end

end
